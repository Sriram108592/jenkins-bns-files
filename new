Creating a JIRA project via a Python script typically involves using JIRA's REST API. To do this, you'll need to:

1. Set up an API token and get the necessary permissions in JIRA.
2. Use a Python library like `requests` to interact with the JIRA API.

Here's a step-by-step guide to create a JIRA project based on a reference project:

### 1. Prerequisites

- Ensure you have the `requests` library installed. You can install it via pip:
  ```bash
  pip install requests
  ```

- Obtain your JIRA domain, username, and API token. You can create an API token from your Atlassian account.

### 2. Script to Create a JIRA Project

Here's a Python script to create a JIRA project with reference to another project:

```python
import requests
from requests.auth import HTTPBasicAuth
import json

# Configuration
JIRA_DOMAIN = "https://your-domain.atlassian.net"
API_TOKEN = "your-api-token"
USERNAME = "your-email@example.com"
REFERENCE_PROJECT_KEY = "REFPROJ"
NEW_PROJECT_KEY = "NEWPROJ"
NEW_PROJECT_NAME = "New Project"
NEW_PROJECT_TYPE = "software"  # Can be 'software', 'business', or 'service_desk'

# API endpoints
CREATE_PROJECT_URL = f"{JIRA_DOMAIN}/rest/api/3/project"
REFERENCE_PROJECT_URL = f"{JIRA_DOMAIN}/rest/api/3/project/{REFERENCE_PROJECT_KEY}"

# Authentication
auth = HTTPBasicAuth(USERNAME, API_TOKEN)

# Get reference project configuration
response = requests.get(REFERENCE_PROJECT_URL, auth=auth)
if response.status_code == 200:
    reference_project = response.json()
else:
    print(f"Failed to fetch reference project: {response.text}")
    exit(1)

# Prepare the new project payload
new_project_payload = {
    "key": NEW_PROJECT_KEY,
    "name": NEW_PROJECT_NAME,
    "projectTypeKey": NEW_PROJECT_TYPE,
    "projectTemplateKey": reference_project['projectTypeKey'],  # Using the same template as the reference project
    "leadAccountId": reference_project['lead']['accountId'],  # Copy the project lead
    "permissionScheme": reference_project['permissionScheme']['id'],
    "notificationScheme": reference_project['notificationScheme'],
    "categoryId": reference_project['projectCategory']['id'] if reference_project['projectCategory'] else None,
}

# Create the new project
headers = {
    "Accept": "application/json",
    "Content-Type": "application/json"
}

response = requests.post(CREATE_PROJECT_URL, headers=headers, auth=auth, data=json.dumps(new_project_payload))
if response.status_code == 201:
    print("Project created successfully!")
else:
    print(f"Failed to create project: {response.text}")
```

### Notes

1. **API Token and Authentication**: The script uses HTTP Basic Authentication with an API token. Replace `your-api-token` and `your-email@example.com` with your actual API token and JIRA email.
2. **Reference Project**: Replace `REFPROJ` with the key of the reference project you want to copy settings from.
3. **New Project Details**: Modify `NEWPROJ`, `New Project`, and `software` as needed to specify your new project's key, name, and type.
4. **Permissions and Schemes**: The script copies the permission scheme, notification scheme, and category from the reference project. Ensure the user has the necessary permissions to view these settings in the reference project and to create new projects.

This script provides a basic template. Depending on your JIRA setup, you might need to adjust the payload to include other settings or handle additional configurations.
_______________________
import requests

def create_jira_project(server_url, username, password, project_key, project_name, project_type_key="com.atlassian.jira.project.template:SCRUM_MASTER"):
  """
  Creates a new project in a Jira server instance using the REST API.

  Args:
      server_url (str): The base URL of your Jira server instance.
      username (str): The username for a user with project creation permissions.
      password (str): The password for the specified username.
      project_key (str): The unique key for the new project.
      project_name (str): The human-readable name of the new project.
      project_type_key (str, optional): The key for the project template to use. Defaults to "com.atlassian.jira.project.template:SCRUM_MASTER" (Scrum).

  Returns:
      dict: A dictionary containing the response details, or None on error.

  Raises:
      requests.exceptions.RequestException: Raised if an error occurs during the API call.
  """

  # Construct the REST API endpoint URL
  url = f"{server_url}/rest/api/2/project"

  # Prepare the payload for the POST request
  payload = {
      "key": project_key,
      "name": project_name,
      "projectTypeKey": project_type_key
  }

  # Set authentication headers
  headers = {
      "Authorization": f"Basic {requests.auth.encode_basicauth(username, password).decode('utf-8')}"
  }

  try:
    # Send the POST request using requests
    response = requests.post(url, headers=headers, json=payload)
    response.raise_for_status()  # Raise an exception for non-200 status codes

    # Return the response dictionary on success
    return response.json()

  except requests.exceptions.RequestException as e:
    print(f"Error creating Jira project: {e}")
    return None

# Example usage
server_url = "https://your-jira-server.com"
username = "your_username"
password = "your_password"
project_key = "MYPROJ"
project_name = "My New Project"

# Optional: Specify a different project type key (e.g., "com.atlassian.jira.project.template:KANBAN")
project_type_key = None

response = create_jira_project(server_url, username, password, project_key, project_name, project_type_key)

if response:
  print("Project created successfully!")
  print(f"Project details: {response}")
else:
  print("Project creation failed.")
